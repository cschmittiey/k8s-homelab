apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: immich
  namespace: default
spec:
  interval: 30m
  chart:
    spec:
      chart: immich
      version: 0.10.1
      sourceRef:
        kind: HelmRepository
        name: immich
        namespace: flux-system

  values:
    ## This chart relies on the common library chart from bjw-s
    ## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
    ## Refer there for more detail about the supported values

    # These entries are shared between all the Immich components

    env:
      # REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
      DB_HOSTNAME:
        valueFrom:
          secretKeyRef:
            name: immich-cnpg-app
            key: host
      DB_USERNAME:
        valueFrom:
          secretKeyRef:
            name: immich-cnpg-app
            key: username
      DB_DATABASE_NAME:
        valueFrom:
          secretKeyRef:
            name: immich-cnpg-app
            key: dbname
      # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
      DB_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: immich-cnpg-app
            key: password
      # IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
      PUBLIC_IMMICH_SERVER_URL: https://immich.${SECRET_DOMAIN}


    image:
      # renovate: datasource=github-releases depName=immich-app/immich
      tag: "v2.2.1"

    immich:
      metrics:
        # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
        enabled: true
      persistence:
        # Main data store for all photos shared between different components.
        library:
          # Automatically creating the library volume is not supported by this chart
          # You have to specify an existing PVC to use
          existingClaim: immich
      # configuration is immich-config.json converted to yaml
      # ref: https://immich.app/docs/install/config-file/
      #
      configuration: {}
        # trash:
        #   enabled: false
        #   days: 30
        # storageTemplate:
        #   enabled: true
        #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

    # Dependencies

    postgresql:
      enabled: false
      # image:
      #   repository: tensorchord/pgvecto-rs
      #   tag: pg14-v0.2.0
      # global:
      #   postgresql:
      #     auth:
      #       username: immich
      #       database: immich
      #       password: immich
      # primary:
      #   initdb:
      #     scripts:
      #       create-extensions.sql: |
      #         CREATE EXTENSION cube;
      #         CREATE EXTENSION earthdistance;
      #         CREATE EXTENSION vectors;

    redis:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
      master:
        resources:
          requests:
            cpu: 100m
          limits:
            cpu: 500m

    # Immich components

    server:
      enabled: true
      image:
        repository: ghcr.io/immich-app/immich-server
        pullPolicy: IfNotPresent
      ingress:
        main:
          enabled: true
          className: external
          annotations:
            external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
            nginx.ingress.kubernetes.io/proxy-body-size: "0"
          hosts:
            - host: &host immich.${SECRET_DOMAIN}
              paths:
                - path: /
          tls:
            - hosts:
                - *host

    machine-learning:
      enabled: true
      image:
        repository: ghcr.io/immich-app/immich-machine-learning
        pullPolicy: IfNotPresent
      env:
        TRANSFORMERS_CACHE: /cache
      persistence:
        cache:
          enabled: true
          size: 10Gi
          # Optional: Set this to pvc to avoid downloading the ML models every start.
          # type: emptyDir
          accessMode: ReadWriteMany
          storageClass: longhorn
